{"ast":null,"code":"var _jsxFileName = \"/home/aish/Projects/pers/notes-app/src/components/NewNoteForm.js\";\nimport React, { useState } from \"react\";\nimport { Input, Form, FormGroup, Label, Button, Modal, ModalHeader, ModalBody, ModalFooter, FormFeedback } from \"reactstrap\";\n\nconst NewNoteForm = props => {\n  const setNewNoteData = (noteType, noteTitle, currentProject, noteURL) => {\n    const tempData = {\n      type: noteType,\n      title: noteTitle,\n      text: \"\",\n      url: noteURL\n    };\n    setProjectMap({ ...projectMap,\n      [currentProject]: projectMap[currentProject].concat(tempData)\n    });\n  };\n\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  const [noteType, setNoteType] = useState(\"\");\n  const [noteTitle, setNoteTitle] = useState(\"\");\n  const [noteURL, setNoteURL] = useState(\"\");\n  const [validate, setValidate] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (validate === \"has-success\") {\n      props.setNewNoteData(noteType, noteTitle, props.currentProject, noteURL);\n    }\n  };\n\n  const checkURL = url => {\n    try {\n      new URL(url);\n    } catch (_) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateProperty = (a, b) => {\n    if (a === b) {\n      setValidate(\"has-danger\");\n    } else {\n      setValidate(\"has-success\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-label\": \"newNoteForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"primary\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"New Note\"), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"New Note Details:\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    tag: \"fieldset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, \"What type of a note is it?\"), /*#__PURE__*/React.createElement(FormGroup, {\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"noteTypeText\",\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"radio\",\n    id: \"noteTypeText\",\n    name: \"noteType\",\n    onClick: () => setNoteType(\"text\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }), \"Text\")), /*#__PURE__*/React.createElement(FormGroup, {\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"noteTypeLink\",\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"radio\",\n    id: \"noteTypeLink\",\n    name: \"noteType\",\n    onClick: () => setNoteType(\"link\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 19\n    }\n  }), \"Link\"))), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"noteTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, \"Note Title:\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"noteTitle\",\n    id: \"noteTitle\",\n    onChange: e => {\n      setNoteTitle(e.target.value);\n      validateProperty(e.target.value, \"\");\n    },\n    valid: validate === \"has-success\",\n    invalid: validate === \"has-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormFeedback, {\n    valid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, \"Great!\"), /*#__PURE__*/React.createElement(FormFeedback, {\n    invalid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, \"Please provide a title!\")), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"noteURL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"URL (for link note)\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"noteURL\",\n    id: \"noteURL\",\n    onChange: e => setNoteURL(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    onClick: () => {\n      toggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"Create\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Cancel\")))));\n};\n\nexport default NewNoteForm;","map":{"version":3,"sources":["/home/aish/Projects/pers/notes-app/src/components/NewNoteForm.js"],"names":["React","useState","Input","Form","FormGroup","Label","Button","Modal","ModalHeader","ModalBody","ModalFooter","FormFeedback","NewNoteForm","props","setNewNoteData","noteType","noteTitle","currentProject","noteURL","tempData","type","title","text","url","setProjectMap","projectMap","concat","modal","setModal","toggle","setNoteType","setNoteTitle","setNoteURL","validate","setValidate","handleSubmit","checkURL","URL","_","validateProperty","a","b","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Input,\n  Form,\n  FormGroup,\n  Label,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  FormFeedback,\n} from \"reactstrap\";\n\nconst NewNoteForm = (props) => {\n  const setNewNoteData = (noteType, noteTitle, currentProject, noteURL) => {\n    const tempData = {\n      type: noteType,\n      title: noteTitle,\n      text: \"\",\n      url: noteURL,\n    };\n    setProjectMap({\n      ...projectMap,\n      [currentProject]: projectMap[currentProject].concat(tempData),\n    });\n  };\n\n  const [modal, setModal] = useState(false);\n  const toggle = () => setModal(!modal);\n\n  const [noteType, setNoteType] = useState(\"\");\n  const [noteTitle, setNoteTitle] = useState(\"\");\n  const [noteURL, setNoteURL] = useState(\"\");\n  const [validate, setValidate] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (validate === \"has-success\") {\n      props.setNewNoteData(noteType, noteTitle, props.currentProject, noteURL);\n    }\n  };\n\n  const checkURL = (url) => {\n    try {\n      new URL(url);\n    } catch (_) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateProperty = (a, b) => {\n    if (a === b) {\n      setValidate(\"has-danger\");\n    } else {\n      setValidate(\"has-success\");\n    }\n  };\n\n  return (\n    <div aria-label=\"newNoteForm\">\n      <Button className=\"primary\" onClick={toggle}>\n        New Note\n      </Button>\n      <Modal isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle}>New Note Details:</ModalHeader>\n        <ModalBody>\n          <Form onSubmit={handleSubmit}>\n            <FormGroup tag=\"fieldset\">\n              <Label>What type of a note is it?</Label>\n              <FormGroup check>\n                <Label for=\"noteTypeText\" check>\n                  <Input\n                    type=\"radio\"\n                    id=\"noteTypeText\"\n                    name=\"noteType\"\n                    onClick={() => setNoteType(\"text\")}\n                  />\n                  Text\n                </Label>\n              </FormGroup>\n              <FormGroup check>\n                <Label for=\"noteTypeLink\" check>\n                  <Input\n                    type=\"radio\"\n                    id=\"noteTypeLink\"\n                    name=\"noteType\"\n                    onClick={() => setNoteType(\"link\")}\n                  />\n                  Link\n                </Label>\n              </FormGroup>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"noteTitle\">Note Title:</Label>\n              <Input\n                type=\"text\"\n                name=\"noteTitle\"\n                id=\"noteTitle\"\n                onChange={(e) => {\n                  setNoteTitle(e.target.value);\n                  validateProperty(e.target.value, \"\");\n                }}\n                valid={validate === \"has-success\"}\n                invalid={validate === \"has-danger\"}\n              />\n              <FormFeedback valid>Great!</FormFeedback>\n              <FormFeedback invalid>Please provide a title!</FormFeedback>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"noteURL\">URL (for link note)</Label>\n              <Input\n                type=\"text\"\n                name=\"noteURL\"\n                id=\"noteURL\"\n                onChange={(e) => setNoteURL(e.target.value)}\n              />\n            </FormGroup>\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              onClick={() => {\n                toggle();\n              }}\n            >\n              Create\n            </Button>\n            <Button color=\"secondary\" onClick={toggle}>\n              Cancel\n            </Button>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default NewNoteForm;\n"]},"metadata":{},"sourceType":"module"}