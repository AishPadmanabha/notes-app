{"version":3,"sources":["components/NoteCard.js","components/MyTabNav.js","components/NewNoteForm.js","components/NewProjectForm.js","data/data.js","views/App.js","serviceWorker.js","index.js"],"names":["NoteCard","props","useState","noteObject","text","noteText","setNoteText","noteURL","url","noteTitle","title","noteType","type","Col","sm","Card","body","CardTitle","includes","URL","_","checkURL","checkText","href","target","rel","className","replace","style","color","CardText","Form","FormGroup","Input","name","id","placeholder","value","onChange","e","form","aria-label","MyTabNav","console","log","Nav","tabs","projectNames","map","project","i","NavItem","key","NavLink","classnames","active","activeTab","String","indexOf","onClick","tab","setActiveTab","TabContent","TabPane","tabId","Row","projectMap","note","NewNoteForm","modal","setModal","toggle","setNoteType","setNoteTitle","setNoteURL","validate","setValidate","Button","Modal","isOpen","ModalHeader","ModalBody","onSubmit","currentProject","tempData","setProjectMap","concat","setNewNoteData","Label","check","for","a","valid","invalid","FormFeedback","NewProjectForm","projectName","setProjectName","setProjectNames","NOTE_TYPE","notes","getAllNotes","App","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAiGeA,EAtFE,SAACC,GAAW,IAAD,EACMC,mBAASD,EAAME,WAAWC,MADhC,mBACnBC,EADmB,KACTC,EADS,KAGtBC,EAAUN,EAAME,WAAWK,IAC3BC,EAAYR,EAAME,WAAWO,MAC7BC,EAAWV,EAAME,WAAWS,KAqDhC,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAMC,MAAI,GACR,kBAACC,EAAA,EAAD,KACE,2BArCFN,EAASO,SAAS,QACbT,EAnBM,SAACD,GAChB,IACE,IAAIW,IAAIX,GACR,MAAOY,GACP,OAAO,EAGT,OAAO,EAcDC,CAASd,GAXC,SAACF,GACjB,MAAiB,KAAbA,EAWIiB,CAAUrB,EAAME,WAAWC,MAE3B,uBACEmB,KAAMhB,EACNiB,OAAO,SACPC,IAAI,sBACJC,UAAU,OAETzB,EAAME,WAAWC,KAAKuB,QAAQ,IAAK,KAKtC,uBACEJ,KAAMhB,EACNiB,OAAO,SACPC,IAAI,sBACJC,UAAU,OAETjB,EAAUkB,QAAQ,IAAK,KAKvB,yBAAKC,MAAO,CAAEC,MAAO,QAArB,4BAAwDtB,KAW/D,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACErB,KAAK,WACLsB,KAAK,OACLC,GAAG,QACHC,YAAY,mBACZC,MAAOhC,EACPiC,SAAU,SAACC,GAAD,OAAOjC,EAAYiC,EAAEf,OAAOa,QACtCG,MAAI,EACJC,aAAW,gB,gDCxCZC,EAzCE,SAACzC,GAKhB,OADA0C,QAAQC,IAAI3C,GAEV,yBAAKwC,aAAW,aACd,8BACE,kBAACI,EAAA,EAAD,CAAKC,MAAI,GACN7C,EAAM8C,aAAaC,KAAI,SAACC,EAASC,GAAV,OACtB,kBAACC,EAAA,EAAD,CAASC,IAAKF,EAAGxB,UAAU,oBACzB,kBAAC2B,EAAA,EAAD,CACE3B,UAAW4B,IAAW,CACpBC,OACEtD,EAAMuD,YAAcC,OAAOxD,EAAM8C,aAAaW,QAAQT,MAE1DU,QAAS,WAfR,IAACC,IAgBOH,OAAOxD,EAAM8C,aAAaW,QAAQT,IAfnDhD,EAAMuD,YAAcI,GAAK3D,EAAM4D,aAAaD,KAkBnCX,OAIP,kBAACa,EAAA,EAAD,CAAYN,UAAWvD,EAAMuD,WAC3B,kBAACO,EAAA,EAAD,CAASC,MAAOP,OAAOxD,EAAMuD,YAC3B,kBAACS,EAAA,EAAD,KACGhE,EAAMiE,WAAWjE,EAAM8C,aAAa9C,EAAMuD,YAAYR,KACrD,SAACmB,EAAMjB,GAAP,OACE,kBAAC,EAAD,CAAUE,IAAKnD,EAAMuD,UAAYN,EAAG/C,WAAYgE,c,+DCyFrDC,EA7GK,SAACnE,GAAW,IAAD,EACHC,oBAAS,GADN,mBACtBmE,EADsB,KACfC,EADe,KAEvBC,EAAS,kBAAMD,GAAUD,IAFF,EAIGnE,mBAAS,IAJZ,mBAItBS,EAJsB,KAIZ6D,EAJY,OAKKtE,mBAAS,IALd,mBAKtBO,EALsB,KAKXgE,EALW,OAMCvE,mBAAS,IANV,mBAMtBK,EANsB,KAMbmE,EANa,OAOGxE,mBAAS,IAPZ,mBAOtByE,EAPsB,KAOZC,EAPY,KAsC7B,OACE,yBAAKnC,aAAW,eACd,kBAACoC,EAAA,EAAD,CAAQnD,UAAU,UAAUiC,QAASY,GAArC,YAGA,kBAACO,EAAA,EAAD,CAAOC,OAAQV,EAAOE,OAAQA,GAC5B,kBAACS,EAAA,EAAD,CAAaT,OAAQA,GAArB,qBACA,kBAACU,EAAA,EAAD,KACE,kBAAClD,EAAA,EAAD,CAAMmD,SAxBO,WACnBvC,QAAQC,IAAI,QACZ2B,IACiB,gBAAbI,GAhBiB,SAAChE,EAAUF,EAAW0E,EAAgB5E,GAC3D,IAAM6E,EAAW,CACfxE,KAAMD,EACND,MAAOD,EACPL,KAAM,GACNI,IAAKD,GAEPN,EAAMoF,cAAN,2BACKpF,EAAMiE,YADX,kBAEGiB,EAAiBlF,EAAMiE,WAAWiB,GAAgBG,OAAOF,MAQ1DG,CAAe5E,EAAUF,EAAWR,EAAMkF,eAAgB5E,KAqBpD,kBAACiF,EAAA,EAAD,mCACA,kBAACxD,EAAA,EAAD,CAAWyD,OAAK,GACd,kBAACD,EAAA,EAAD,CAAOE,IAAI,eAAeD,OAAK,GAC7B,kBAACxD,EAAA,EAAD,CACErB,KAAK,QACLuB,GAAG,eACHD,KAAK,WACLyB,QAAS,kBAAMa,EAAY,WAL/B,SAUF,kBAACxC,EAAA,EAAD,CAAWyD,OAAK,GACd,kBAACD,EAAA,EAAD,CAAOE,IAAI,eAAeD,OAAK,GAC7B,kBAACxD,EAAA,EAAD,CACErB,KAAK,QACLuB,GAAG,eACHD,KAAK,WACLyB,QAAS,kBAAMa,EAAY,WAL/B,SAUF,kBAACxC,EAAA,EAAD,KACE,kBAACwD,EAAA,EAAD,CAAOE,IAAI,aAAX,eACA,kBAACzD,EAAA,EAAD,CACErB,KAAK,OACLsB,KAAK,YACLC,GAAG,YACHG,SAAU,SAACC,GA9CA,IAACoD,EA+CVlB,EAAalC,EAAEf,OAAOa,OA/CZsD,EAgDOpD,EAAEf,OAAOa,MA9CtCuC,EADEe,IA+C2C,GA9CjC,aAEA,gBA8CFC,MAAoB,gBAAbjB,EACPkB,QAAsB,eAAblB,IAEX,kBAACmB,EAAA,EAAD,CAAcF,OAAK,GAAnB,UACA,kBAACE,EAAA,EAAD,CAAcD,SAAO,GAArB,4BAEF,kBAAC7D,EAAA,EAAD,KACE,kBAACwD,EAAA,EAAD,CAAOE,IAAI,WAAX,uBACA,kBAACzD,EAAA,EAAD,CACErB,KAAK,OACLsB,KAAK,UACLC,GAAG,UACHG,SAAU,SAACC,GAAD,OAAOmC,EAAWnC,EAAEf,OAAOa,WAGzC,kBAACwC,EAAA,EAAD,CAAQjE,KAAK,SAASiB,MAAM,WAA5B,UAjDF,eAqDE,kBAACgD,EAAA,EAAD,CAAQhD,MAAM,YAAY8B,QAASY,GAAnC,eC3BGwB,EAxEQ,SAAC9F,GAAW,IAAD,EACNC,oBAAS,GADH,mBACzBmE,EADyB,KAClBC,EADkB,KAE1BC,EAAS,kBAAMD,GAAUD,IAFC,EAGMnE,mBAAS,IAHf,mBAGzB8F,EAHyB,KAGZC,EAHY,OAIA/F,mBAAS,IAJT,mBAIzByE,EAJyB,KAIfC,EAJe,KA+BhC,OACE,yBAAKnC,aAAW,kBACd,kBAACoC,EAAA,EAAD,CAAQnD,UAAU,YAAYiC,QAASY,GAAvC,eAGA,kBAACO,EAAA,EAAD,CAAOC,OAAQV,EAAOE,OAAQA,GAC5B,kBAACS,EAAA,EAAD,CAAaT,OAAQA,GAArB,wBACA,kBAACU,EAAA,EAAD,KACE,kBAAClD,EAAA,EAAD,CAAMmD,SAzBO,WACnBX,IACiB,gBAAbI,IATJ1E,EAAMoF,cAAN,2BACKpF,EAAMiE,YADX,kBAEG8B,EAAc,MAEjB/F,EAAMiG,gBAAgBjG,EAAM8C,aAAauC,OAAOU,KAQhDpB,EAAY,IACZqB,EAAe,MAoBP,kBAACjE,EAAA,EAAD,KACE,kBAACwD,EAAA,EAAD,CAAOE,IAAI,eAAX,iBACA,kBAACzD,EAAA,EAAD,CACErB,KAAK,OACLsB,KAAK,cACLC,GAAG,cACHG,SAAU,SAACC,GACT0D,EAAe1D,EAAEf,OAAOa,OACJE,EAAEf,OAAOa,MAxBvCpC,EAAM8C,aAAa7B,SAAS8E,GAC9BpB,EAAY,cAEZA,EAAY,gBAuBFgB,MAAoB,gBAAbjB,EACPkB,QAAsB,eAAblB,IAEX,kBAACmB,EAAA,EAAD,CAAcF,OAAK,GAAnB,+BACA,kBAACE,EAAA,EAAD,CAAcD,SAAO,GAArB,8CAIF,kBAAChB,EAAA,EAAD,CAAQjE,KAAK,SAASiB,MAAM,WAA5B,UAnBF,eAuBE,kBAACgD,EAAA,EAAD,CAAQhD,MAAM,YAAY8B,QAASY,GAAnC,eC5EC4B,EACL,OADKA,EAEL,OAKFC,EAAK,aACT,cAAe,CACb,CACExF,KAAMuF,EACNzF,MAAO,uBACPN,KACE,8FAEJ,CACEQ,KAAMuF,EACN3F,IAAK,gDACLJ,KAAM,cAER,CACEQ,KAAMuF,EACN3F,IAAK,gCACLJ,KAAM,qBAlBc,aAqBV,CACZ,CACEQ,KAAMuF,EACNzF,MAAO,cACPN,KACE,m2BAEJ,CACEQ,KAAMuF,EACN3F,IAAK,mCACLJ,KAAM,2BAKCiG,EAAc,WACzB,OAAOD,GCCME,EApCH,WAAO,IAAD,EACoBpG,mBAASmG,KAD7B,mBACTnC,EADS,KACGmB,EADH,OAEkBnF,mBAAS,KAF3B,mBAETsD,EAFS,KAEEK,EAFF,OAGwB3D,mBAASqG,OAAOC,KAAKH,MAH7C,mBAGTtD,EAHS,KAGKmD,EAHL,KAKhB,OACE,yBAAKxE,UAAU,YAAYe,aAAW,WACpC,yBAAKf,UAAU,aAAf,mBACA,kBAAC,EAAD,CACEqB,aAAcA,EACdmB,WAAYA,EACZV,UAAWA,EACXK,aAAcA,IAEhB,kBAACI,EAAA,EAAD,KACE,kBAACpD,EAAA,EAAD,CAAKa,UAAU,YACb,kBAAC,EAAD,CACEyD,eAAgBpC,EAAaS,GAC7BU,WAAYA,EACZmB,cAAeA,EACfa,gBAAiBA,KAGrB,kBAACrF,EAAA,EAAD,KACE,kBAAC,EAAD,CACEkC,aAAcA,EACdmB,WAAYA,EACZmB,cAAeA,EACfa,gBAAiBA,QCvBTO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d4395837.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Card,\n  CardTitle,\n  CardText,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n} from \"reactstrap\";\n\nconst NoteCard = (props) => {\n  const [noteText, setNoteText] = useState(props.noteObject.text);\n  // const noteText = props.noteObject.text\n  var noteURL = props.noteObject.url;\n  var noteTitle = props.noteObject.title;\n  var noteType = props.noteObject.type;\n\n  const checkURL = (url) => {\n    try {\n      new URL(url);\n    } catch (_) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const checkText = (noteText) => {\n    if (noteText === \"\") {\n      return false;\n    }\n    return true;\n  };\n\n  const checkInputType = () => {\n    if (noteType.includes(\"text\")) {\n      return noteTitle;\n    } else {\n      if (checkURL(noteURL)) {\n        if (checkText(props.noteObject.text)) {\n          return (\n            <a\n              href={noteURL}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"url\"\n            >\n              {props.noteObject.text.replace('\"', \"\")}\n            </a>\n          );\n        } else {\n          return (\n            <a\n              href={noteURL}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"url\"\n            >\n              {noteTitle.replace('\"', \"\")}\n            </a>\n          );\n        }\n      } else {\n        return <div style={{ color: \"red\" }}>ALERT: Invalid Link =&gt {noteURL}</div>;\n      }\n    }\n  };\n\n  return (\n    <Col sm=\"6\">\n      <Card body>\n        <CardTitle>\n          <b>{checkInputType()}</b>\n        </CardTitle>\n        <CardText>\n          <Form>\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                name=\"text\"\n                id=\"notes\"\n                placeholder=\"Enter your notes\"\n                value={noteText}\n                onChange={(e) => setNoteText(e.target.value)}\n                form\n                aria-label=\"notes\"\n              />\n              {/* {executeAfter()} */}\n            </FormGroup>\n          </Form>\n        </CardText>\n      </Card>\n    </Col>\n  );\n};\n\nexport default NoteCard;\n","import React, { useState } from \"react\";\nimport classnames from \"classnames\";\nimport NoteCard from \"./NoteCard\";\nimport { Nav, NavItem, NavLink, TabContent, TabPane, Row } from \"reactstrap\";\n\nconst MyTabNav = (props) => {\n  const toggle = (tab) => {\n    if (props.activeTab !== tab) props.setActiveTab(tab);\n  };\n  console.log(props);\n  return (\n    <div aria-label=\"myTabPane\">\n      <main>\n        <Nav tabs>\n          {props.projectNames.map((project, i) => (\n            <NavItem key={i} className=\"font-weight-bold\">\n              <NavLink\n                className={classnames({\n                  active:\n                    props.activeTab === String(props.projectNames.indexOf(project)),\n                })}\n                onClick={() => {\n                  toggle(String(props.projectNames.indexOf(project)));\n                }}\n              >\n                {project}\n              </NavLink>\n            </NavItem>\n          ))}\n          <TabContent activeTab={props.activeTab}>\n            <TabPane tabId={String(props.activeTab)}>\n              <Row>\n                {props.projectMap[props.projectNames[props.activeTab]].map(\n                  (note, i) => (\n                    <NoteCard key={props.activeTab + i} noteObject={note} />\n                  )\n                )}\n              </Row>\n            </TabPane>\n          </TabContent>\n        </Nav>\n      </main>\n    </div>\n  );\n};\n\nexport default MyTabNav;\n","import React, { useState } from \"react\";\nimport {\n  Input,\n  Form,\n  FormGroup,\n  Label,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  FormFeedback,\n} from \"reactstrap\";\n\nconst NewNoteForm = (props) => {\n  const [modal, setModal] = useState(false);\n  const toggle = () => setModal(!modal);\n\n  const [noteType, setNoteType] = useState(\"\");\n  const [noteTitle, setNoteTitle] = useState(\"\");\n  const [noteURL, setNoteURL] = useState(\"\");\n  const [validate, setValidate] = useState(\"\");\n\n  const setNewNoteData = (noteType, noteTitle, currentProject, noteURL) => {\n    const tempData = {\n      type: noteType,\n      title: noteTitle,\n      text: \"\",\n      url: noteURL,\n    };\n    props.setProjectMap({\n      ...props.projectMap,\n      [currentProject]: props.projectMap[currentProject].concat(tempData),\n    });\n  };\n\n  const handleSubmit = () => {\n    console.log(\"here\");\n    toggle();\n    if (validate === \"has-success\") {\n      setNewNoteData(noteType, noteTitle, props.currentProject, noteURL);\n    }\n  };\n\n  const validateProperty = (a, b) => {\n    if (a === b) {\n      setValidate(\"has-danger\");\n    } else {\n      setValidate(\"has-success\");\n    }\n  };\n\n  return (\n    <div aria-label=\"newNoteForm\">\n      <Button className=\"primary\" onClick={toggle}>\n        New Note\n      </Button>\n      <Modal isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle}>New Note Details:</ModalHeader>\n        <ModalBody>\n          <Form onSubmit={handleSubmit}>\n            <Label>What type of a note is it?</Label>\n            <FormGroup check>\n              <Label for=\"noteTypeText\" check>\n                <Input\n                  type=\"radio\"\n                  id=\"noteTypeText\"\n                  name=\"noteType\"\n                  onClick={() => setNoteType(\"text\")}\n                />\n                Text\n              </Label>\n            </FormGroup>\n            <FormGroup check>\n              <Label for=\"noteTypeLink\" check>\n                <Input\n                  type=\"radio\"\n                  id=\"noteTypeLink\"\n                  name=\"noteType\"\n                  onClick={() => setNoteType(\"link\")}\n                />\n                Link\n              </Label>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"noteTitle\">Note Title:</Label>\n              <Input\n                type=\"text\"\n                name=\"noteTitle\"\n                id=\"noteTitle\"\n                onChange={(e) => {\n                  setNoteTitle(e.target.value);\n                  validateProperty(e.target.value, \"\");\n                }}\n                valid={validate === \"has-success\"}\n                invalid={validate === \"has-danger\"}\n              />\n              <FormFeedback valid>Great!</FormFeedback>\n              <FormFeedback invalid>Please provide a title!</FormFeedback>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"noteURL\">URL (for link note)</Label>\n              <Input\n                type=\"text\"\n                name=\"noteURL\"\n                id=\"noteURL\"\n                onChange={(e) => setNoteURL(e.target.value)}\n              />\n            </FormGroup>\n            <Button type=\"submit\" color=\"primary\">\n              Create\n            </Button>\n            &nbsp;&nbsp;&nbsp;\n            <Button color=\"secondary\" onClick={toggle}>\n              Cancel\n            </Button>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default NewNoteForm;\n","import React, { useState } from \"react\";\nimport {\n  Input,\n  Form,\n  FormGroup,\n  Label,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  FormFeedback,\n} from \"reactstrap\";\n\nconst NewProjectForm = (props) => {\n  const [modal, setModal] = useState(false);\n  const toggle = () => setModal(!modal);\n  const [projectName, setProjectName] = useState(\"\");\n  const [validate, setValidate] = useState(\"\");\n\n  const setNewProjectData = () => {\n    props.setProjectMap({\n      ...props.projectMap,\n      [projectName]: [],\n    });\n    props.setProjectNames(props.projectNames.concat(projectName));\n  };\n\n  const handleSubmit = () => {\n    toggle();\n    if (validate === \"has-success\") {\n      setNewProjectData();\n    }\n    setValidate(\"\");\n    setProjectName(\"\");\n  };\n\n  const validateProjectName = () => {\n    if (props.projectNames.includes(projectName)) {\n      setValidate(\"has-danger\");\n    } else {\n      setValidate(\"has-success\");\n    }\n  };\n\n  return (\n    <div aria-label=\"newProjectForm\">\n      <Button className=\"secondary\" onClick={toggle}>\n        New Project\n      </Button>\n      <Modal isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle}>New Project Details:</ModalHeader>\n        <ModalBody>\n          <Form onSubmit={handleSubmit}>\n            <FormGroup>\n              <Label for=\"projectName\">Project Name:</Label>\n              <Input\n                type=\"text\"\n                name=\"projectName\"\n                id=\"projectName\"\n                onChange={(e) => {\n                  setProjectName(e.target.value);\n                  validateProjectName(e.target.value);\n                }}\n                valid={validate === \"has-success\"}\n                invalid={validate === \"has-danger\"}\n              />\n              <FormFeedback valid>That's a good project name!</FormFeedback>\n              <FormFeedback invalid>\n                Uh oh! This project name is taken, sorry!\n              </FormFeedback>\n            </FormGroup>\n            <Button type=\"submit\" color=\"primary\">\n              Create\n            </Button>\n            &nbsp;&nbsp;&nbsp;\n            <Button color=\"secondary\" onClick={toggle}>\n              Cancel\n            </Button>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default NewProjectForm;\n","export const NOTE_TYPE = {\n  TEXT: \"text\",\n  LINK: \"link\",\n};\n\nexport const NO_PROJECT = \"no project\";\n\nconst notes = {\n  \"Learn React\": [\n    {\n      type: NOTE_TYPE.TEXT,\n      title: \"Create a new project\",\n      text:\n        \"cd to the project directory\\nnpx create-react-app project-name\\ncd project-name\\nnpm start\",\n    },\n    {\n      type: NOTE_TYPE.LINK,\n      url: \"https://reactjs.org/docs/getting-started.html\",\n      text: \"React docs\",\n    },\n    {\n      type: NOTE_TYPE.LINK,\n      url: \"https://reactstrap.github.io/\",\n      text: \"Reactstrap docs\",\n    },\n  ],\n  [NO_PROJECT]: [\n    {\n      type: NOTE_TYPE.TEXT,\n      title: \"Lorem ipsum\",\n      text:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Amet massa vitae tortor condimentum. Pretium aenean pharetra magna ac placerat vestibulum lectus mauris ultrices. Justo nec ultrices dui sapien eget mi proin sed libero. Ultricies leo integer malesuada nunc vel risus commodo viverra maecenas. Nisi quis eleifend quam adipiscing. Sit amet tellus cras adipiscing enim eu. Tincidunt tortor aliquam nulla facilisi cras fermentum. Orci phasellus egestas tellus rutrum. Tortor dignissim convallis aenean et. Imperdiet proin fermentum leo vel orci porta non pulvinar neque. Purus semper eget duis at tellus. Ut consequat semper viverra nam libero justo laoreet sit amet. Sed enim ut sem viverra aliquet eget. Amet volutpat consequat mauris nunc congue nisi. Aliquet nibh praesent tristique magna.\",\n    },\n    {\n      type: NOTE_TYPE.LINK,\n      url: \"https://loremipsum.io/generator/\",\n      text: \"Lorem Ipsum generator\",\n    },\n  ],\n};\n\nexport const getAllNotes = () => {\n  return notes;\n};\n\nexport const getNotesForProject = (project) => {\n  return notes[project];\n};\n\nexport const addNoteToProject = (project, note) => {\n  notes[project] = notes[project].concat(note);\n};\n","import React, { useState } from \"react\";\nimport MyTabNav from \"../components/MyTabNav\";\nimport NewNoteForm from \"../components/NewNoteForm\";\nimport NewProjectForm from \"../components/NewProjectForm\";\nimport { getAllNotes } from \"../data/data\";\nimport { Col, Row } from \"reactstrap\";\n\nconst App = () => {\n  const [projectMap, setProjectMap] = useState(getAllNotes());\n  const [activeTab, setActiveTab] = useState(\"0\");\n  const [projectNames, setProjectNames] = useState(Object.keys(getAllNotes()));\n\n  return (\n    <div className=\"container\" aria-label=\"noteApp\">\n      <div className=\"my-header\">Notes On-The-Go</div>\n      <MyTabNav\n        projectNames={projectNames}\n        projectMap={projectMap}\n        activeTab={activeTab}\n        setActiveTab={setActiveTab}\n      />\n      <Row>\n        <Col className=\"col-auto\">\n          <NewNoteForm\n            currentProject={projectNames[activeTab]}\n            projectMap={projectMap}\n            setProjectMap={setProjectMap}\n            setProjectNames={setProjectNames}\n          />\n        </Col>\n        <Col>\n          <NewProjectForm\n            projectNames={projectNames}\n            projectMap={projectMap}\n            setProjectMap={setProjectMap}\n            setProjectNames={setProjectNames}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/styles.css\";\nimport App from \"./views/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}